name: CI

on:
  push:
    branches: ["*"]
  pull_request:
    branches: [develop]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, ubuntu-24.04, ubuntu-22.04, macos-latest]
        architecture: [x86_64, aarch64, armv7]
        rust: ["1.86"]
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.rust == 'nightly' }}

    steps:
      - uses: actions/checkout@v4

      - name: Restore cargo cache
        uses: Swatinem/rust-cache@v2
        env:
          cache-name: ci
        with:
          shared-key: ${{ matrix.os }}-${{ env.cache-name }}-${{ matrix.rust }}

      - name: MacOS Workaround
        if: matrix.os == 'macos-latest'
        run: cargo clean

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          components: clippy

      - name: Override rust toolchain
        run: rustup override set ${{ matrix.rust }}

      - name: Rustup Show
        run: rustup show

      - name: Build Debug
        run: |
          cargo build

      - name: Run tests
        run: cargo test --workspace

      - name: Run clippy
        run: |
          cargo clippy --workspace --all-features

      - name: Build Release
        run: cargo build --release

      - name: Test Install
        run: cargo install --path "./hosts-hook-cli" --force --locked

#      - name: Binary Size (unix)
#        if: matrix.os != 'windows-latest'
#        run: |
#          ls -l ./target/release/gitui
#
#      - name: Binary Size (win)
#        if: matrix.os == 'windows-latest'
#        run: |
#          ls -l ./target/release/gitui.exe
#
#      - name: Binary dependencies (mac)
#        if: matrix.os == 'macos-latest'
#        run: |
#          otool -L ./target/release/gitui

#      - name: Build MSI (windows)
#        if: matrix.os == 'windows-latest'
#        run: |
#          cargo install cargo-wix --version 0.3.3 --locked
#          cargo wix --version
#          cargo wix -p gitui --no-build --nocapture --output ./target/wix/gitui-win.msi
#          ls -l ./target/wix/gitui-win.msi

#  build-linux-musl:
#    runs-on: ubuntu-latest
#    strategy:
#      fail-fast: false
#      matrix:
#        rust: [stable, "1.86"]
#    continue-on-error: ${{ matrix.rust == 'nightly' }}
#    steps:
#      - uses: actions/checkout@v4
#
#      - name: Restore cargo cache
#        uses: Swatinem/rust-cache@v2
#        env:
#          cache-name: ci
#        with:
#          key: ubuntu-latest-${{ env.cache-name }}-${{ matrix.rust }}
#
#      - name: Install Rust
#        uses: dtolnay/rust-toolchain@master
#        with:
#          toolchain: ${{ matrix.rust }}
#          targets: x86_64-unknown-linux-musl
#
#      # The build would fail without manually installing the target.
#      # https://github.com/dtolnay/rust-toolchain/issues/83
#      - name: Manually install target
#        run: rustup target add x86_64-unknown-linux-musl
#
#      - name: Override rust toolchain
#        run: rustup override set ${{ matrix.rust }}
#
#      - name: Rustup Show
#        run: rustup show
#
#      - name: Setup MUSL
#        run: |
#          sudo apt-get -qq install musl-tools
#      - name: Build Debug
#        run: |
#          cargo build --target=x86_64-unknown-linux-musl
#          ./target/x86_64-unknown-linux-musl/debug/hostshook --version
#      - name: Build Release
#        run: |
#          cargo build --release --target=x86_64-unknown-linux-musl --locked
#          ./target/x86_64-unknown-linux-musl/release/hostshook --version
#          ls -l ./target/x86_64-unknown-linux-musl/release/hostshook
#      - name: Test
#        run: |
#          cargo test --workspace --target=x86_64-unknown-linux-musl
#      - name: Test Install
#        run: cargo install --path "./hosts-hook-cli" --force --locked

#  build-linux-arm:
#    runs-on: ubuntu-latest
#    strategy:
#      fail-fast: false
#      matrix:
#        rust: [stable, "1.86"]
#    continue-on-error: ${{ matrix.rust == 'nightly' }}
#    steps:
#      - uses: actions/checkout@v4
#
#      - name: Restore cargo cache
#        uses: Swatinem/rust-cache@v2
#        env:
#          cache-name: ci
#        with:
#          key: ubuntu-latest-${{ env.cache-name }}-${{ matrix.rust }}
#
#      - name: Install Rust
#        uses: dtolnay/rust-toolchain@master
#        with:
#          toolchain: ${{ matrix.rust }}
#
#      - name: Override rust toolchain
#        run: rustup override set ${{ matrix.rust }}
#
#      - name: Setup ARM toolchain
#        run: |
#          rustup target add aarch64-unknown-linux-gnu
#          rustup target add armv7-unknown-linux-gnueabihf
#          rustup target add arm-unknown-linux-gnueabihf
#
#          curl -o $GITHUB_WORKSPACE/aarch64.tar.xz https://armkeil.blob.core.windows.net/developer/Files/downloads/gnu-a/8.2-2018.08/gcc-arm-8.2-2018.08-x86_64-aarch64-linux-gnu.tar.xz
#          curl -o $GITHUB_WORKSPACE/arm.tar.xz https://armkeil.blob.core.windows.net/developer/Files/downloads/gnu-a/8.2-2018.08/gcc-arm-8.2-2018.08-x86_64-arm-linux-gnueabihf.tar.xz
#
#          tar xf $GITHUB_WORKSPACE/aarch64.tar.xz
#          tar xf $GITHUB_WORKSPACE/arm.tar.xz
#
#          echo "$GITHUB_WORKSPACE/gcc-arm-8.2-2018.08-x86_64-aarch64-linux-gnu/bin" >> $GITHUB_PATH
#          echo "$GITHUB_WORKSPACE/gcc-arm-8.2-2018.08-x86_64-arm-linux-gnueabihf/bin" >> $GITHUB_PATH
#
#      - name: Rustup Show
#        run: rustup show
#
#      - name: Build Debug
#        run: |
#          cargo build --target=aarch64-unknown-linux-gnu
#          cargo build --target=armv7-unknown-linux-gnueabihf
#          cargo build --target=arm-unknown-linux-gnueabihf
#      - name: Build Release
#        run: |
#          cargo build --release --target=aarch64-unknown-linux-gnu --locked
#          cargo build --release --target=armv7-unknown-linux-gnueabihf --locked
#          cargo build --release --target=arm-unknown-linux-gnueabihf --locked
#          ls -l ./target/aarch64-unknown-linux-gnu/release/hostshook || ls -l ./target/armv7-unknown-linux-gnueabihf/release/hostshook || ls -l ./target/arm-unknown-linux-gnueabihf/release/hostshook
#
#  build-apple-x86:
#    runs-on: macos-latest
#    strategy:
#      fail-fast: false
#      matrix:
#        rust: [stable, "1.86"]
#    continue-on-error: ${{ matrix.rust == 'nightly' }}
#    steps:
#      - uses: actions/checkout@v4
#
#      - name: Restore cargo cache
#        uses: Swatinem/rust-cache@v2
#        env:
#          cache-name: ci
#        with:
#          key: apple-x86-${{ env.cache-name }}-${{ matrix.rust }}
#
#      - name: Install Rust
#        uses: dtolnay/rust-toolchain@master
#        with:
#          toolchain: ${{ matrix.rust }}
#
#      - name: Override rust toolchain
#        run: rustup override set ${{ matrix.rust }}
#
#      - name: Setup target
#        run: rustup target add x86_64-apple-darwin
#
#      - name: Rustup Show
#        run: rustup show
#
#      - name: Build Debug
#        run: |
#          cargo build --target=x86_64-apple-darwin
#      - name: Build Release
#        run: |
#          cargo build --release --target=x86_64-apple-darwin --locked
#          ls -l ./target/x86_64-apple-darwin/release/hostshook

#  linting:
#    name: Lints
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v4
#
#      - name: Restore cargo cache
#        uses: Swatinem/rust-cache@v2
#        env:
#          cache-name: ci
#        with:
#          key: ubuntu-latest-${{ env.cache-name }}-stable
#
#      - name: Install Rust
#        uses: dtolnay/rust-toolchain@stable
#        with:
#          components: rustfmt
#
#      - run: cargo fmt -- --check
#
#      - name: cargo-sort
#        run: |
#          cargo install cargo-sort --force
#          cargo sort -c -w
#
#      - name: cargo-deny install
#        run: |
#          cargo install --locked cargo-deny
#
#      - name: cargo-deny checks
#        run: |
#          cargo deny check

  udeps:
    name: udeps
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Restore cargo cache
        uses: Swatinem/rust-cache@v2
        env:
          cache-name: ci
        with:
          key: ubuntu-latest-${{ env.cache-name }}-nightly

      - name: Install Rust
        uses: dtolnay/rust-toolchain@nightly

      - name: build cargo-udeps
        run: cargo install --git https://github.com/est31/cargo-udeps --locked

      - name: run cargo-udeps
        run: cargo +nightly udeps --all-targets

  log-test:
    name: Changelog Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Extract release notes
        id: extract_release_notes
        uses: ffurrer2/extract-release-notes@v2
        with:
          release_notes_file: ./release-notes.txt
      - uses: actions/upload-artifact@v4
        with:
          name: release-notes.txt
          path: ./release-notes.txt

#  test-homebrew:
#    name: Test Homebrew Formula (macOS)
#    runs-on: macos-latest
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v4
#
#      - name: Install stable Rust
#        uses: actions-rs/toolchain@v1
#        with:
#          toolchain: stable
#
#      - name: Install Homebrew
#        run: /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
#
#      - name: Set up Homebrew in PATH
#        run: |
#          echo "$HOMEBREW_PREFIX/bin:$HOMEBREW_PREFIX/sbin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin" >> $GITHUB_PATH
#
#      - name: Update Homebrew
#        run: brew update
#
#      - name: Let Homebrew build gitui from source
#        run: brew install --head --build-from-source hostshook
#
#      - name: Run Homebrew test
#        run: brew test hostshook