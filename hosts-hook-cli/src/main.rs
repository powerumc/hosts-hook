use std::env;
use std::fs::File;
use std::io::Write;
use clap::{Args, Parser, Subcommand};
use hostshook::BUILD_LIB_NAME;

fn main() {
    let cli = Cli::parse();

    match cli.command {
        Some(Commands::Init(opts)) => opts.execute().unwrap(),
        None => print_command()
    }
}

#[derive(Parser)]
#[command(version, about, long_about = None)]
#[command(next_line_help = true)]
struct Cli {
    #[command(subcommand)]
    command: Option<Commands>,
}

#[derive(Subcommand)]
enum Commands {
    Init(InitOpts),
}

#[derive(Args)]
struct InitOpts {
    #[arg(short, long, default_value = ".hosts")]
    file: String
}

impl InitOpts {
    fn execute(&self) -> std::io::Result<()> {
        let mut file = File::create_new(&self.file)?;
        file.write_all(b"# This file is generated by hostshook cli.\n127.0.0.1 example.com\n")?;
        
        Ok(())
    }
}

fn print_command() {
    let curr_dir = env!("PWD");
    let cmd = export_cmd(curr_dir);
    
    println!("{cmd}");
}

pub fn export_cmd(path: &str) -> String {
    #[cfg(target_os = "macos")]
    {
        format!("# To use hostshook, run the following command
# Or `source <(cargo run)`
export DYLD_INSERT_LIBRARIES={path}/target/debug/{BUILD_LIB_NAME}")
    }
    
    #[cfg(target_os = "linux")]
    {
        format!("export LD_PRELOAD={path}/target/debug/{BUILD_LIB_NAME}")
    }
}