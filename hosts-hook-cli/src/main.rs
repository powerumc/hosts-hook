use clap::{Args, Parser, Subcommand};
use hostshook::{get_os, OsType, BUILD_LIB_NAME};
use std::fs::File;
use std::io::Write;
use std::env;

fn main() -> std::io::Result<()> {
    let cli = Cli::parse();

    match cli.command {
        Some(Commands::Init(opts)) => Ok(opts.execute()?),
        None => Ok(print_command())
    }
}

#[derive(Parser)]
#[command(version, about, long_about = None)]
#[command(next_line_help = true)]
struct Cli {
    #[command(subcommand)]
    command: Option<Commands>,
}

#[derive(Subcommand)]
enum Commands {
    Init(InitOpts),
}

#[derive(Args)]
struct InitOpts {
    #[arg(short, long, default_value = ".hosts")]
    file: String
}

impl InitOpts {
    fn execute(&self) -> std::io::Result<()> {
        let mut file = File::create_new(&self.file)?;
        file.write_all(b"# This file is generated by hostshook cli.\n127.0.0.1 example.com\n")?;
        
        Ok(())
    }
}

fn print_command() {
    let cmd = export_cmd();
    
    println!("{cmd}");
}

pub fn export_cmd() -> String {
    let comment = "# To use hostshook, run the following command
# source <(hostshook)
# Or";

    #[cfg(debug_assertions)]
    let path = {
        let pwd = env::current_dir().unwrap();
        format!("{}/target/debug/{BUILD_LIB_NAME}", pwd.display())
    };

    #[cfg(not(debug_assertions))]
    let path = {
        let mut pwd = env::current_exe().unwrap();
        pwd.pop();
        pwd.pop();
        pwd.push("lib");
        pwd.push(BUILD_LIB_NAME);
        let pwd = hostshook::normalize_path(&pwd);

        format!("{}", pwd.display())
    };

    match get_os() {
        OsType::MacOS => {
            format!("{comment}
export DYLD_INSERT_LIBRARIES={path}")
        }
        OsType::Linux => {
            format!("{comment}
export LD_PRELOAD={path}")
        }
        OsType::Windows => panic!("Windows is not supported yet"),
    }
}